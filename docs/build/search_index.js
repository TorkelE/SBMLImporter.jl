var documenterSearchIndex = {"docs":
[{"location":"Support.html#support","page":"Supported SBML Features","title":"Supported SBML Features","text":"","category":"section"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"SBMLImporter provides extensive support for Systems Biology Markup Language (SBML) features. It successfully passes ADD test cases (excluding hierarchical models and FBA models). Key features supported include:","category":"page"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"Events\nRate\nAssignment\nAlgebraic rules\nDynamic compartment size\nSpecies conversion factors","category":"page"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"Species can be specified in either concentration or amount. The unit determination is:","category":"page"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"If initialConcentration is set for a species, its unit will be set to concentration.\nIf initialAmount is set for a species, it will be treated as being in amount.\nIf neither is set, and the substanceUnits of the species is \"substance,\" it is treated as being in amounts.","category":"page"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"Currently SBMLImporter does not support the following:","category":"page"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"Events with priority\nEvents with delay\nDelay (creating a delay-differential-equation)\nFast reactions\nParameter or species names corresponding to Julia constants (pi, NaN, true, false)","category":"page"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"Import might also fail for complicated nested piecewise expressions inside functions.","category":"page"},{"location":"Support.html#Support-for-additional-features","page":"Supported SBML Features","title":"Support for additional features","text":"","category":"section"},{"location":"Support.html","page":"Supported SBML Features","title":"Supported SBML Features","text":"If SBMLImporter lacks support for a feature you would like, please file an issue on GitHub.","category":"page"},{"location":"index.html#SBMLImporter.jl-Documentation","page":"Home","title":"SBMLImporter.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This is the documentation for SBMLImporter.jl, a Julia package for importing ODE models specified in the Systems Biology Markup Language (SBML). This package offers robust SBML support, covering SBML features such as events, rate, assignment, algebraic rules, dynamic compartment size, and conversion factors. For a list of supported features, see here. For a list ofdifferences compared to SBMLToolkit.jl, see the [README].","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To perform parameter estimation for an SBML model, see PEtab.jl which for importing SBML models, employs SBMLImporter.","category":"page"},{"location":"index.html#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SBMLImporter is a tool for importing SBML models into a ModelingToolkit.jlODESystem, which with other things allows for symbolic model pre-processing. An ODESystem can easily be converted into an ODEProblem and solved using any ODE solver in OrdinaryDiffEq.jl. If the model includes events, callbacks are also generated during the import.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"info: Info\nThe number of arguments returned by SBML_to_ODESystem varies depending on whether the model has events. When importing an SBML model, SBML_to_ODESystem will inform about the number of returned arguments.","category":"page"},{"location":"index.html#Importing-a-Model-Without-Events-and-Piecewise","page":"Home","title":"Importing a Model Without Events and Piecewise","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Importing an SBML model without is straightforward. Given the path to a SBML file do:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using SBMLImporter\nsys, specie_map, parameter_map = SBML_to_ODESystem(path_SBML)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Here, sys is the ODESystem, specie_map is a mapping for the initial values, and parameter_map is a mapping/values for the model parameters. To simulate the model, create an ODEProblem:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using OrdinaryDiffEq\ntspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Solve ODE with Rodas5P solver\nsol = solve(prob, Rodas5P())","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Setting jac=true mean that the Jacobian of the ODE is computed symbolically, which is recommended for performance.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Your explanation is detailed, but I made a few adjustments for clarity and consistency:","category":"page"},{"location":"index.html#Importing-a-Model-with-Events","page":"Home","title":"Importing a Model with Events","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"When importing a SBML model events are rewritten to callbacks. There are two types of callbacks, ContinuousCallbacks or DiscreteCallbacks. The former use root-finding to identify when the event is triggered, while DiscreteCallbacks solves the ODE up to the event time, apply the event, and then proceeds. Since root-finding can be computationally demanding, SBMLImporter rewrite SBML events into DiscreteCallbacks when possible. To keep track of the discrete event times, the importer returns a function for computing said event times given the model parameters:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"sys, specie_map, parameter_map, cb, get_tstops = SBML_to_ODESystem(path_SBML)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Here, cb represent the model's events, and get_tstops is a function to compute the event times given the model parameters. To simulate the model, do:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"tspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\n# Compute event times\ntstops = get_tstops(prob.p, prob.u0)\nsol = solve(prob, Rodas5P(), tstops=tstops, callback=callbacks)","category":"page"},{"location":"index.html#Importing-a-Model-with-Time-Dependent-Piecewise","page":"Home","title":"Importing a Model with Time-Dependent Piecewise","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Piecewise functions in SBML correspond to the Julia ifelse function:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ifelse(cond, value_true, value_false)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Here, if cond==true, the statement evaluates to value_true. While ifelse can be directly encoded in the model, this may decrease performance as a discontinuity is added to the model. Therefore, SBMLImporter attempts to rewrite ifelse to callbacks (events). Additionally, as ifelse can sometimes be active at time t0, SBMLImporter provides a function to adjust ifelse statements active at time zero. To import a model with piecewise, do:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"sys, specie_map, parameter_map, cb, get_tstops, ifelse_t0 = SBML_to_ODESystem(path_SBML)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Here, ifelse_t0 is a vector of functions handling piecewise (ifelse) conditions rewritten to events which are active at time zero. To solve the model do:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"tspan = (0, 10.0)\nprob = ODEProblem(sys, specie_map, tspan, parameter_map, jac=true)\ntstops = get_tstops(prob.p, prob.u0)\n# Adjust ifelse statements active at time zero\nfor _f! in ifelse_t0\n    _f!(prob.u0, prob.p)\nend\nsol = solve(prob, Rodas5P(), tstops=tstops, callback=cb)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To prevent the rewriting of ifelse to events when creating the ODESystem, set ifelse_to_callback=false when calling SBML_to_ODESystem.","category":"page"},{"location":"index.html#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"We will soon publish a paper you can cite if you found SBMLImporter.jl helpful in your work.","category":"page"},{"location":"API_choosen.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API_choosen.html","page":"API","title":"API","text":"SBML_to_ODESystem","category":"page"},{"location":"API_choosen.html#SBMLImporter.SBML_to_ODESystem","page":"API","title":"SBMLImporter.SBML_to_ODESystem","text":"SBML_to_ODESystem(path_SBML::AbstractString;\n                  ifelse_to_callback::Bool=true,\n                  write_to_file::Bool=false, \n                  verbose::Bool=true, \n                  return_all::Bool=false, \n                  model_as_string::Bool=false)\n\nParse an SBML model into a ModelingToolkit ODESystem and potentially convert events/piecewise to callbacks.\n\nBy default, structurally_simplified is called on the ODESystem before it is returned.\n\nFor information on simulating the ODESystem, refer to the documentation.\n\nFor testing pathSBML can be the model as a string if modelas_string=true\n\nnote: Note\nThe number of returned arguments depends on whether the SBML model has events and/or piecewise expressions (see below).\n\nArguments\n\npath_SBML: File path to a valid SBML file (level 2 or higher).\nifelse_to_callback=true: Whether to rewrite ifelse (piecewise) expressions to callbacks; recommended for performance.\nwrite_to_file=false: Whether to write the parsed SBML model to a Julia file in the same directory as the SBML file.\nverbose=true: Whether or not to display information on the number of return arguments.\nreturn_all=true: Whether or not to return all possible arguments (see below), regardless of whether the model has events.\n\nReturns\n\node_system: A ModelingToolkit ODESystem that can be converted into an ODEProblem and solved.\nspecie_map: A species map setting initial values; together with the ODESystem, it can be converted into an ODEProblem.\nparameter_map A parameter map setting parameter values; together with the ODESystem, it can be converted into an ODEProblem.\ncbset - only for models with events/piecewise expressions: Callbackset (events) for the model.\ncompute_tstops!- Only for models with events/piecewise expressions: Function computing time stops for discrete callbacks in the cbset.\nifelse_t0 - Only for models with time-dependent piecewise expressions: Functions checking and adjusting for callback-rewritten piecewise expressions that are active at t=t0.\n\n\n\n\n\n","category":"function"}]
}
